#Binary Tree

import turtle as t
t.left(90)
t.speed(100)
def tree(h, a):
    if h<30:
        return
    else:
        t.forward(h)
        t.right(a/2)
        tree(3*h/4, a)
        t.left(a)
        tree(3*h/4, a)
        t.right(a/2)
        t.backward(h)

tree(100,60)
t.done()

#Dragon
#еще не готов

import turtle
def dragon_build(turtle_string, n):
    rules = {'x':'x+yf', 'y':'fx-y','f':'f', '-':'-', '+':'+'}
    turtle_string = ''.join([rules[x] for x in turtle_string])
    if n > 1: return dragon_build(turtle_string, n - 1)
    else: return turtle_string

def dragon_draw(size):
    turtle_string = dragon_build('fx', size)
    for x in turtle_string:
        if x == 'f': turtle.forward(20)
        elif x == '+': turtle.right(90)
        elif x == '-': turtle.left(90)

def main():
    n = int(input('Size of the dragon curve: '))
    dragon_draw(n)
    turtle.done()

if __name__ == '__main__': main()
